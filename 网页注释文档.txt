<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="initial-scale=1.0, user-scalable=no, width=device-width">
        <title>租房指南</title>
        <link rel="stylesheet" href="http://cache.amap.com/lbs/static/main1119.css" />
        <link rel="stylesheet" href="http://cache.amap.com/lbs/static/jquery.range.css" />
        <script src="http://cache.amap.com/lbs/static/jquery-1.9.1.js"></script>
        <script src="http://cache.amap.com/lbs/static/es5.min.js"></script>
        //注册账号并申请Key
        1. 首先，注册开发者账号，成为高德开放平台开发者
        2. 登陆之后，在进入「应用管理」 页面「创建新应用」
        3. 为应用添加 Key，「服务平台」一项请选择「 Web 端 ( JSAPI ) 」
        注：由于 JS API 不像它家的 Web API 一样有流量限制，注册一个key可以随意使用
        以及载入编写代码时可能用到的 API 插件（同步加载插件）
        rrivalRange：公交到达圈
        Scale：标尺
        Geocoder：正向地理编码（地址-坐标）
        Transfer：路径规划
        Autocomplete：地址自动补全
        <script src="http://webapi.amap.com/maps?v=1.3&key=22d3816e107f199992666d6412fa0691&plugin=AMap.ArrivalRange,AMap.Scale,AMap.Geocoder,AMap.Transfer,AMap.Autocomplete"></script>
        <script src="http://cache.amap.com/lbs/static/jquery.range.js"></script>
        <style>
        .control-panel {
            position: absolute;
            top: 30px;
            right: 20px;
        }

        .control-entry {
            width: 280px;
            background-color: rgba(119, 136, 153, 0.8);
            font-family: fantasy, sans-serif;
            text-align: left;
            color: white;
            overflow: auto;
            padding: 10px;
            margin-bottom: 10px;
        }

        .control-input {
            margin-left: 120px;
        }

        .control-input input[type="text"] {
            width: 160px;
        }

        .control-panel label {//输入控制面板
            float: left;
            width: 120px;
        }

        #transfer-panel {//路径规划面板
            position: absolute;
            background-color: white;
            max-height: 80%;
            overflow-y: auto;
            top: 30px;
            left: 20px;
            width: 250px;
        }
        </style>
    </head>

    <body>
        //添加div标签作为地图容器，同时为该div指定id属性
        <div id="container"></div>
        <div class="control-panel">//输入控制面板
            <div class="control-entry">
                <label>选择工作地点：</label>
                <div class="control-input">
                    <input id="work-location" type="text">
                </div>
            </div>
            <div class="control-entry">
                <label>选择通勤方式：</label>
                <div class="control-input">
                     在输入标签内可以设定 onClick 与 onChange 属性，它们的作用是当该输入元素上发生点击或者内容变化的事件时，设定的内容就会被运行。
                    <input type="radio" name="vehicle" value="SUBWAY,BUS" onClick="takeBus(this)" checked/> 公交+地铁
                    <input type="radio" name="vehicle" value="SUBWAY" onClick="takeSubway(this)" /> 地铁
                </div>
            </div>
            <div class="control-entry">
                <label>导入房源文件：</label>
                <div class="control-input">
                    <input type="file" name="file" onChange="importRentInfo(this)" />
                </div>
            </div>
        </div>
        <div id="transfer-panel"></div>//路径规划面板
        <script>
        //创建一个地图，创建的同时为地图设置中心点等属性
        var map = new AMap.Map("container", {
            resizeEnable: true,//页面可调大小
            zoomEnable: true,//允许缩放
            center: [114.311582, 30.598467],//地图中心，此处是武汉市政府
            zoom: 11//缩放等级
        });
        //添加标尺
        var scale = new AMap.Scale();
        map.addControl(scale);

        var arrivalRange = new AMap.ArrivalRange();//公交到达圈
        var x, y, t, vehicle = "SUBWAY,BUS";//精度纬度以及通勤方式
        var workAddress, workMarker；//工作地点及标记
        var rentMarkerArray = [];//房源标记
        var polygonArray = [];//存储到达时间的计算结果
        var amapTransfer;//路径规划

        var infoWindow = new AMap.InfoWindow({
            offset: new AMap.Pixel(0, -30)
        });//信息窗口

        var auto = new AMap.Autocomplete({
            input: "work-location"
        });//自动补全
        AMap.event.addListener(auto, "select", workLocationSelected);//添加事件监听


        function takeBus(radio) {
            vehicle = radio.value;
            loadWorkLocation()
        }

        function takeSubway(radio) {
            vehicle = radio.value;
            loadWorkLocation()
        }

        function importRentInfo(fileInfo) {//导入房源信息的文件
            var file = fileInfo.files[0].name;
            loadRentLocationByFile(file);
        }

        function workLocationSelected(e) {
            workAddress = e.poi.name;
            loadWorkLocation();
        }//更新工作地点，加载交通圈

        function loadWorkMarker(x, y, locationName) {
            workMarker = new AMap.Marker({
                map: map,
                title: locationName,
                icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png',
                position: [x, y]

            });//加载工作地点标记
        }


        function loadWorkRange(x, y, t, color, v) {//在地图上绘制到达圈
            arrivalRange.search([x, y], t, function(status, result) {
                if (result.bounds) {
                    for (var i = 0; i < result.bounds.length; i++) {
                        var polygon = new AMap.Polygon({
                            map: map,
                            fillColor: color,
                            fillOpacity: "0.4",
                            strokeColor: color,
                            strokeOpacity: "0.8",
                            strokeWeight: 1
                        });
                        polygon.setPath(result.bounds[i]);
                        polygonArray.push(polygon);
                    }
                }
            }, {
                policy: v
            });
        }

        function addMarkerByAddress(address) {
            var geocoder = new AMap.Geocoder({
                city: "武汉",
                radius: 1000
            });
            geocoder.getLocation(address, function(status, result) {
                if (status === "complete" && result.info === 'OK') {
                    var geocode = result.geocodes[0];
                    rentMarker = new AMap.Marker({
                        map: map,
                        title: address,
                        icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png',
                        position: [geocode.location.getLng(), geocode.location.getLat()]
                    });
                    rentMarkerArray.push(rentMarker);

                    rentMarker.content = "<div>房源：<a target = '_blank' href='https://wh.58.com/pinpaigongyu/?key=" + address + "'>" + address + "</a><div>"
                    //在房源被点击时打开
                    rentMarker.on('click', function(e) {
                    }
                        infoWindow.setContent(e.target.content);//鼠标移到相应位置显示在content里的房源信息
                        infoWindow.open(map, e.target.getPosition());//标记位置打开窗口
                        if (amapTransfer) amapTransfer.clear();
                        amapTransfer = new AMap.Transfer({
                            map: map,
                            policy: AMap.TransferPolicy.LEAST_TIME,
                            city: "武汉市",
                            panel: 'transfer-panel'
                        });
                        amapTransfer.search([{
                            keyword: workAddress
                        }, {
                            keyword: address
                        }], function(status, result) {})
                    });
                }
            })
        }

        function delWorkLocation() {
            if (polygonArray) map.remove(polygonArray);
            if (workMarker) map.remove(workMarker);
            polygonArray = [];
        }//清空已有的到达圈

        function delRentLocation() {
            if (rentMarkerArray) map.remove(rentMarkerArray);
            rentMarkerArray = [];
        }//清空房源标记

        function loadWorkLocation() {
            delWorkLocation();
            var geocoder = new AMap.Geocoder({
                city: "武汉",
                radius: 1000
            });//加载新的工作地点的函数

            geocoder.getLocation(workAddress, function(status, result) {
                if (status === "complete" && result.info === 'OK') {
                    var geocode = result.geocodes[0];
                    x = geocode.location.getLng();
                    y = geocode.location.getLat();
                    loadWorkMarker(x, y);
                    loadWorkRange(x, y, 60, "#3f67a5", vehicle);
                    //地图移动到工作地点的位置
                    map.setZoomAndCenter(12, [x, y]);
                }
            })
        }

        function loadRentLocationByFile(fileName) {
            delRentLocation();
            var rent_locations = new Set();
            //加载房源信息
            $.get(fileName, function(data) {
                data = data.split("\n");
                data.forEach(function(item, index) {
                    rent_locations.add(item.split(",")[1]);
                });
                rent_locations.forEach(function(element, index) {
                    //加上房源房源标志
                    addMarkerByAddress(element);
                });
            });
        }
        </script>
    </body>
</html>